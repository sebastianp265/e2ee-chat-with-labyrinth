services:
  client:
    build: client
    ports:
      - '80:80'
    environment:
      VITE_DOMAIN_URL: ${DOMAIN_URL}
      SERVER_URL_PROXY: http://server:8080
    depends_on:
      server:
        condition: service_healthy

  server:
    build: server
    ports:
      - '8080:8080'
    environment:
      DOMAIN_URL: ${DOMAIN_URL}
      SERVER_DB_URL: jdbc:postgresql://server_db:5432/server_db
      SERVER_DB_USER: ${SERVER_DB_USER}
      SERVER_DB_PASSWORD: ${SERVER_DB_PASSWORD}

      SERVER_TEMP_DB_HOST: server_temp_db
      SERVER_TEMP_DB_PORT: 6379
      SERVER_TEMP_DB_PASSWORD: ${SERVER_TEMP_DB_PASSWORD}

      SESSION_TIMEOUT: ${SESSION_TIMEOUT}

      LABYRINTH_MAX_DEVICE_INACTIVITY: ${LABYRINTH_MAX_DEVICE_INACTIVITY}
    depends_on:
      server_db:
        condition: service_healthy
      server_temp_db:
        condition: service_healthy
    networks:
      - network_server_db
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://server:8080/actuator/health" ]
      interval: 10s
      timeout: 2s
      retries: 10

  server_db:
    container_name: server_db
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: server_db
      POSTGRES_USER: ${SERVER_DB_USER}
      POSTGRES_PASSWORD: ${SERVER_DB_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - network_server_db
    healthcheck:
      test: pg_isready -U postgres -d server
      interval: 2s
      timeout: 2s
      retries: 20

  server_temp_db:
    container_name: server
    image:
      redis:7.4-alpine
    command: ["redis-server", "--requirepass", "${SERVER_TEMP_DB_PASSWORD}"]
    ports:
      - '6379:6379'
    volumes:
      - redis_db:/data
    networks:
      - network_server_db
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${SERVER_TEMP_DB_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  db:
  redis_db:

networks:
  network_server_db: